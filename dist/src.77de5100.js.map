{"version":3,"sources":["sprites/Brick.ts","view/CanvasView.ts","setup.ts","helpers.ts","index.ts"],"names":[],"mappings":";;AIAA;;AAUA;;AADA;ADTA,ACaA,AFbA,AFEA,ACDA,IGYI,AJXJ,KAAA,GIWY,GAAG,KAAf;AACA,AJZA,IIYI,KAAK,GAAG,CAAZ;ADbA,ADAA,AFCA,ACFA,YDEA;AIcA,AJXI,ACCJ,IAAA,KGUS,EJXL,GCCJ,EDDI,CACY,GIUhB,CAAqB,IAArB,EAAqC,AJXjC,EAEY,WAFZ,EAGY,QAHZ,EAIY,WAJZ,EAKI,KALJ,EAKiB;AIOjB,AFfJ,AFIgB,ACAhB,EGWI,IAAI,CAAC,EJXO,MIWZ,CAAc,GJXF,GAAA,MIWZ,IJXY;AIYZ,AJXY,ACDhB,EGYI,OJXY,CIWJ,EHZZ,CGYe,KAAX,EJXY,GAAA,WAAA;AIYf,AFhBD,AFKgB,ACKZ,SDLY,ECKZ,MDLY,GAAA,CCKZ,CAAY,MDLA,ICKZ,EAA6B;ADJjB,ACKR,SDLQ,ACKH,MAAL,GAAc,EDLN,GAAA,GCKc,CAAC,ODLf,MCKM,CAAuB,UAAvB,CAAd;AGOR,AFjBA,AFDY,ACYJ,SGMC,AJlBG,ACYC,OAAL,GGMR,AJlBY,ACYW,CGMH,EJlBuB,EIkB3C,AHN4B,EGMQ,AJlBW,ICYxB,CDZoB,ACYR,EDZvB,QCYW,CAAuB,IAAvB,CAAf;AGOJ,AJVI,ACIA,EGMJ,IAAI,CAAC,EJVI,ACIA,MGMT,CAAc,GJVV,ECIA,CDJkB,ECIE,GGMxB,KJVI,ACI4B,CAAC,aAAT,CAAuB,QAAvB,CAApB;AGOJ,AJVI,ACIA,EGMJ,OJVS,ACIA,CGMD,GAAG,CHNP,GAAa,CGMjB,EJVI,GAAmB,ECIE,CAAC,QDJtB,KCIa,CAAuB,QAAvB,CAAb;AGOP,AJVO,ACIA,SDJK,ACIA,IAAL,GAAY,CDJZ,GAAgB,ICII,CAAC,GDJrB,UCIY,CAAuB,OAAvB,CAAZ;ACZR,AFSQ,ACIH,SDJQ,WAAL,GAAmB,WAAnB;AIUR,AFlBA,AFSQ,SISC,AJTI,QISb,CACI,CJVI,CAAgB,EISxB,CJTQ,CIWJ,EJX0B,IIS9B,CJTQ,CIWU;AAIV,AFvBR,AFSK,ACID,EGUI,AHVJ,ECbE,EEuBM,CAAC,GFvBD,EEuBJ,AHVJ,CCbqC,ADarC,QCb6C,CAAC,ADa9C,CAAA,KAAA,GAAA,ICbqC,CAAuB,ODa5D,KCbqC,CAAzC,EAEA;AEsBQ,EAAA,IAAI,CAAC,UAAL,CAAgB,MAAhB;AAEA,AFvBD,AFSH,EIcI,AJdJ,EETS,IFST,CAAA,QETsB,GAAG,EAAtB,CEuBsB,AJdzB,CIc0B,AJdtB,KAAA,CAAA,MIcsB,GJd1B,EAAI,OAAJ,EAAS;AIcsB,AJf/B,ACGI,KAAA,EAAA,GAAA,CGY2B,IHZtB,IGY8B,CAAC,EHZpC,EGYmC,EAAM,EHZ7B,IGYuB,AHZnC,CGY2B,GHZf,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,SAAF,CAAY,CAAZ,EAAc,CAAd,EAAgB,KAAK,MAAL,CAAY,KAA5B,EAAkC,KAAK,MAAL,CAAY,MAA9C,CAAZ;AETF,ACqBkD,AFtBjD,ADWF,GGWwB,AHbzB,CGaI,AFtBK,KCCG,AHOZ,KERmB,GAAG,EAAnB,ECCD,GAAsB,AHOxB;AGNA,ACqBH,AJdO,SGPG,IHOI,KAAK,IGPH,MAAN,AHOH,CGPgB,UAAC,GAAD,EAAM,OAAN,EAAe,CAAf,EAAgB;AAChC,ADFD,AFSF,ACGD,EAAA,ECZS,CFOA,GGLC,GAAG,CFUb,CAAA,CEVgB,ADFG,GAAG,CCEF,CAAC,ADFlB,GDYH,CAAA,CEVgB,CAAW,CAAC,CAAC,GAAG,CAAL,IAAU,GFUrC,GAAA,UAAgB,CEVA,CAAZ,WFUJ,EAAwD;AETpD,ACqBR,AHZI,QETU,AFSV,CGYK,EDrBQ,EFSb,CETgB,CAAC,CFSjB,EEToB,ACqBxB,CAAmB,CHZf,CDLS,EIiBb,EAAmC,UDrB3B;AAEA,ACoBJ,AFxBG,IAAM,ICIC,CAAC,GAAG,KDJQ,GAAG,CAAtB,cCI2B,GAAG,IAAE,qBAAc,oBAAhB,CAA7B;AACA,ACoBJ,AJnBS,EImBT,CJnBA,IImBK,CDpBK,CAAC,CCoBH,CAAR,CDpBc,uBAAgB,GAAG,IAAG,sBAAe,oBAAlB,CAA7B;AAEA,ACmBJ,AFzBG,AFQH,EIiBA,AJjBA,EERS,EEyBL,CAAC,CDnBG,AHER,CAAA,MGFe,ACmBf,AFzBoB,CEyBN,EAAd,AFzBuB,ECMH,CAAhB,EAAmB,AHEvB,CER6B,AFQzB,GEPJ,EFOI,CGF0B,AHE1B,CEPA,CAAC,CCKkB,IDLvB,CAAW,CAAC,AFOZ,EAAI,IEPc,CAAC,GFOnB,EEPY,AFOF,GEPiB,aAAa,GAAG,CAAhC,IAAqC,UAAhD,IAA8D,aADjC,GAE7B,GAFG;ACQC,ACkBJ,AHfI,EGeJ,GHfI,CGeA,CAAC,AHfD,CEHM,CHAV,CCGI,IEHY,CFGP,CGeT,CDlBmB,ACkBJ,CAAf,EHfI,CEHmB,GHAvB,ECGc,IAAV,GEHe,CAAU,AFGf,EAAA,KAAA,KAAA,CAAV,GAAU,EEHK,EAAsB,CFG3B,CAAV,GAAU,EAAA,CAAE,WEHG,EAAoC,GFGzC,CAAmB,OAAnB,EAA4B,YAAA;AEHc,ACmBxD,AFxBG,AFMC,ACE0C,ICRrC,ECK+C,ACmBlD,CDnBmD,EAAA,CAAF,ECmB3C,CJlBD,ACEmC,EGgB/B,CFxBM,EFML,CENQ,MAAM,CDQ6B,CAAC,CCP5D,CFKI,GELA,ADOuD,CCPtD,ADOyC,KCP9C,CAAW,CAAC,GEuBZ,GFvBkB,CAAC,MAAP,GAAgB,aAAa,GAAG,CAAjC,IAAsC,UAAjD,IAA+D,aADjC,GAE9B,EAFG;ACKuD,ACqB1D,AJnBC,ACCgE,EGkBjE,GJrBU,ACGI,CEH4C,AFGtD,CEHuD,EAAA,CCqBnD,CAAC,IAAD,EAAO,MAAP,CAAR;ADrBuD,ACuB1D,AFzBM,ADMF,EGqBL,CHvBI,CCJS,CCEU,EAA2C,SDFzC,GAAG,EFEd,CEFP,KCEwE,OAAb,CAA3C,EAAkE,oBAAa,OAAb,CAAlE,CAAf;AACA,WAAA,cAAA,CAAW,GAAX,EAAc,CAAE,MAAF,CAAd,CAAA;AACH,ADHE,AFCO,ACMV,EAAA,CEfO,AHSP,CEDS,CCGN,EAXI,CAAP,IFeA,CAAA,ICPsB,GAAG,EAAtB,ADOH,CAAA,SAAA,GAAA,UAAU,KAAV,EAAsB;AEHzB,ACuBD,AJvBI,ACII,EDJJ,EIuBE,IAAI,AJvBN,ACIQ,CDJR,EIuBS,EHnBI,EGmBA,QJvBb,CAAI,CCIA,EAAuB,EDJvB,CAAA,ECI4B,KGmBvB,CAAe,CJvBxB,EAAI,GCIuB,CAAkB,CDJ7C,EAAO,EIuBE,CAAb,GHnB+B,GAA8B,KAAK,CAAC,QAAN,EAA9B;AGoB/B,AF3BO,ADQF,GAFD,CGqBA,AF3BS,CE2BR,IJxBD,QEHsB,GE2B1B,AF3B6B,CE2BR,EF3Bd,CFGH,MIwBJ;AJvBQ,aAAO,KAAK,QAAZ;AEHD,AFIF,ACKD,EAAA,ECTS,CFEF,OCOP,CAAA,GCTqB,GAAG,EAArB,CDSH,CAAA,QAAA,GAAA,UAAS,IAAT,EAAoB;AAChB,QAAG,KAAK,IAAR,EAAc,EDRX,GCQgB,IAAL,CAAU,SAAV,GAAsB,IAAtB;ACTf,ADUF,GAFD,CCRS,UAAU,GAAG,CAAnB;AFCI,GAAP;AEAG,AFGH,ACQA,EDRA,ACQA,ECXS,IFGT,CAAA,GCQA,CCXkB,ADWlB,GCXqB,EAAlB,IDWH,CDRA,ACQA,CDRI,KAAA,CAAA,GCQJ,GAAA,GDRA,EAAI,KCQO,EDRX,EAAS,CCQT,EAAuB;SDRvB,eAAA;AEFG,AFGC,IEHK,SFGE,EEHS,GAAG,AFGP,GEHb,OFGC;AACH,ACOG,KDTK,GCSD,CAAC,YAAL,EAAY;ACVb,ADYC,ICZK,CDYL,EAAA,GAAA,KCZgB,ADYX,GCZc,GAApB,AFCM,CCWL,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,SAAF,CACR,KAAK,CAAC,KADE,EAER,KAAK,CAAC,GAAN,CAAU,CAFF,EAGR,KAAK,CAAC,GAAN,CAAU,CAHF,EAIR,KAAK,CAAC,KAJE,EAKR,KAAK,CAAC,MALE,CAAZ;AAOH,GAVD;ACPG,AFDM,GAAT,CECS,YAAY,GAA8B;AACrD,AFCE,ACiBA,EDjBA,ACiBA,GClBC,GFCD,CAAA,GCiBA,CAAA,SCnBmD,ADmBnD,CDjBA,ACiBA,CDjBI,KAAA,CAAA,GCiBJ,GAAA,GDjBA,EAAI,KCiBO,GDjBX,EAAU,CCiBV,EAA0B;ACjB5B,ADiBE,KCjBC,GDiBD,CDjBA,ICiBA,GAAA,IAAA,ICnBmD,AFEnD;AECF,AFAM,KEAH,QFAU,KAAK,OEHmC,IFG/C;AECN,AFAG,ACgBG,IAAA,CChBH,AFFS,KCkBA,CAAC,OAAP,CAAe,ICpBgC,MDoBhC,KAAA,EAAK;ACf1B,AFCE,ACc4B,KCf3B,QDe2B,KAAI,CAAC,UAAL,CAAgB,KAAhB,CAAA;ACpBuB,ADoBD,CCpB/C,IDoBC,IDbJ,aAAW,MAAX,EAAwB;AACpB,ACaH,GAFD,QDXS,WAAL,GAAkB,MAAlB;AEAD,AFCF,IEDQ,CFNC,WEMW,GAA8B;AACrD,ADaF,KCbK,CADkD,GDcvD,UAAA,EDpBc;AEQZ,ADlCF,CAAA,EAAA,ECkCK,CAFkD;AAGrD,AFTY,GAAV,EESC,CAHkD;AAIrD,AFFF,KEEK,CAJkD,GFEvD,KAAA;AEGE,AFzCF,CAAA,EAAA,EEyCK,CALkD,CAKhD;;AALgD,CAAhD,EAQP;;;AACO,IAAM,KAAK,GAAG,CACnB,CADmB,EAChB,CADgB,EACb,CADa,EACV,CADU,EACP,CADO,EACJ,CADI,EACD,CADC,EACE,CADF,EACK,CADL,EACQ,CADR,EAEnB,CAFmB,EAEhB,CAFgB,EAEb,CAFa,EAEV,CAFU,EAEP,CAFO,EAEJ,CAFI,EAED,CAFC,EAEE,CAFF,EAEK,CAFL,EAEQ,CAFR,EAGnB,CAHmB,EAGhB,CAHgB,EAGb,CAHa,EAGV,CAHU,EAGP,CAHO,EAGJ,CAHI,EAGD,CAHC,EAGE,CAHF,EAGK,CAHL,EAGQ,CAHR,EAInB,CAJmB,EAIhB,CAJgB,EAIb,CAJa,EAIV,CAJU,EAIP,CAJO,EAIJ,CAJI,EAID,CAJC,EAIE,CAJF,EAIK,CAJL,EAIQ,CAJR,EAKnB,CALmB,EAKhB,CALgB,EAKb,CALa,EAKV,CALU,EAKP,CALO,EAKJ,CALI,EAKD,CALC,EAKE,CALF,EAKK,CALL,EAKQ,CALR,EAMnB,CANmB,EAMhB,CANgB,EAMb,CANa,EAMV,CANU,EAMP,CANO,EAMJ,CANI,EAMD,CANC,EAME,CANF,EAMK,CANL,EAMQ,CANR,CAAd","file":"src.77de5100.js","sourceRoot":"..\\src","sourcesContent":["import { Vector } from '../types'\r\n\r\nexport class Brick {\r\n    private brickImage: HTMLImageElement = new Image();\r\n\r\n    constructor(\r\n        private brickWidth:number,\r\n        private brickHeight:number,\r\n        private position: Vector,\r\n        private brickEnergy: number,\r\n        image: string\r\n    ){\r\n        this.brickWidth = brickWidth;\r\n        this.brickHeight = brickHeight;\r\n        this.position = position;\r\n        this.brickEnergy = brickEnergy;\r\n        this.brickImage.src = image;\r\n    }\r\n\r\n    // Getters\r\n    get width(): number {\r\n        return this.brickWidth\r\n    }\r\n    get height(): number {\r\n        return this.brickHeight\r\n    }\r\n    get pos(): Vector {\r\n        return this.position\r\n    }\r\n    get image(): HTMLImageElement {\r\n        return this.brickImage\r\n    }\r\n    get energy(): number {\r\n        return this.brickEnergy\r\n    }\r\n\r\n    // Setters\r\n    set energy(energy:number){\r\n        this.brickEnergy= energy;\r\n    }\r\n}","// Types\r\nimport { Brick } from '../sprites/Brick'\r\nimport { Ball } from '../sprites/Ball'\r\nimport { Paddle } from '../sprites/Paddle'\r\nimport { BRICK_IMAGES } from '~/setup';\r\n\r\nexport class CanvasView {\r\n    public canvas: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D | null; // \r\n    private scoreDisplay: HTMLObjectElement | null; // dive where we render the score\r\n    private start: HTMLObjectElement | null; // start button\r\n    private info: HTMLObjectElement | null; // info element\r\n\r\n    constructor(canvasName:string){\r\n        this.canvas = document.querySelector(canvasName) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext('2d');\r\n        this.scoreDisplay = document.querySelector('#score');\r\n        this.start = document.querySelector('#start');\r\n        this.info = document.querySelector('#info');\r\n    }\r\n\r\n    clear():void {\r\n        this.context?.clearRect(0,0,this.canvas.width,this.canvas.height);\r\n    }\r\n\r\n    initStartButton(startFunction: (view: CanvasView) =>void):void{\r\n        this.start?.addEventListener('click', ()=>startFunction(this));\r\n    }\r\n\r\n    drawScore(score:number):void{\r\n        if (this.scoreDisplay) this.scoreDisplay.innerHTML = score.toString();\r\n    }\r\n\r\n    drawInfo(text:string):void{\r\n        if(this.info) this.info.innerHTML = text;\r\n    }\r\n\r\n    drawSprite(brick: Brick):void{\r\n        if (!Brick) return\r\n\r\n        this.context?.drawImage(\r\n            brick.image,\r\n            brick.pos.x,\r\n            brick.pos.y,\r\n            brick.width,\r\n            brick.height\r\n        )\r\n    }\r\n\r\n    drawBricks(bricks: Brick[]):void{\r\n        bricks.forEach(brick => this.drawSprite(brick));\r\n    }\r\n}","import RED_BRICK_IMAGE from './images/brick-red.png';\nimport BLUE_BRICK_IMAGE from './images/brick-blue.png';\nimport GREEN_BRICK_IMAGE from './images/brick-green.png';\nimport YELLOW_BRICK_IMAGE from './images/brick-yellow.png';\nimport PURPLE_BRICK_IMAGE from './images/brick-purple.png';\n\n// Grab the canvas element for calculating the brick width\n// depending on canvas width\nconst canvas: HTMLCanvasElement |Â null = document.querySelector('#playField');\n\n// Constants\nexport const STAGE_PADDING = 10;\nexport const STAGE_ROWS = 20;\nexport const STAGE_COLS = 10;\nexport const BRICK_PADDING = 5;\nexport const BRICK_WIDTH = canvas\n  ? Math.floor((canvas.width - STAGE_PADDING * 2) / STAGE_COLS) - BRICK_PADDING\n  : 100;\nexport const BRICK_HEIGHT = canvas\n  ? Math.floor((canvas.height - STAGE_PADDING * 2) / STAGE_ROWS) - BRICK_PADDING\n  : 30;\nexport const PADDLE_WIDTH = 150;\nexport const PADDLE_HEIGHT = 25;\nexport const PADDLE_STARTX = 450;\nexport const PADDLE_SPEED = 10;\nexport const BALL_SPEED = 5;\nexport const BALL_SIZE = 20;\nexport const BALL_STARTX = 500;\nexport const BALL_STARTY = 400;\n\nexport const BRICK_IMAGES: { [key: number]: string } = {\n  1: RED_BRICK_IMAGE,\n  2: GREEN_BRICK_IMAGE,\n  3: YELLOW_BRICK_IMAGE,\n  4: BLUE_BRICK_IMAGE,\n  5: PURPLE_BRICK_IMAGE\n};\n\nexport const BRICK_ENERGY: { [key: number]: number } = {\n  1: 1, // Red brick\n  2: 1, // Green brick\n  3: 2, // Yellow brick\n  4: 2, // Blue brick\n  5: 3 // Purple brick\n};\n\n// prettier-ignore\nexport const LEVEL = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n  0, 2, 2, 2, 2, 2, 2, 2, 2, 0,\n  0, 3, 3, 3, 3, 3, 3, 3, 3, 0,\n  0, 0, 4, 4, 4, 4, 4, 4, 0, 0, \n  0, 0, 5, 5, 0, 0, 5, 5, 0, 0,\n];\n","import { Brick } from './sprites/Brick';\r\nimport{\r\n    BRICK_IMAGES,\r\n    LEVEL,\r\n    STAGE_COLS,\r\n    STAGE_PADDING,\r\n    BRICK_WIDTH,\r\n    BRICK_HEIGHT,\r\n    BRICK_PADDING,\r\n    BRICK_ENERGY\r\n} from './setup';\r\nimport { Vector } from './types';\r\n\r\nexport function createBricks():Brick[] {\r\n    return LEVEL.reduce((acc, element, i)=>{\r\n        const row = Math.floor((i + 1) / STAGE_COLS);\r\n        const col = i % STAGE_COLS;\r\n\r\n        const x = STAGE_PADDING + col*(BRICK_WIDTH + BRICK_PADDING);\r\n        const y = STAGE_PADDING + row *(BRICK_HEIGHT + BRICK_PADDING);\r\n\r\n        if (element === 0) return acc;\r\n\r\n        const nBrick = new Brick(BRICK_WIDTH,BRICK_HEIGHT, {x,y}, BRICK_ENERGY[element], BRICK_IMAGES[element])\r\n        return [...acc, nBrick]\r\n    }, [] as Brick[])\r\n}","import { CanvasView } from './view/CanvasView'\nimport { Ball } from \"./sprites/Ball\";\nimport { Brick } from \"./sprites/Brick\";\nimport { Paddle } from \"./sprites/Paddle\";\n// Images\nimport PADDLE_IMAGE from \"./images/paddle.png\";\nimport BALL_IMAGE from \"./images/ball.png\";\n// Level and colors\nimport {PADDLE_SPEED, PADDLE_WIDTH, PADDLE_HEIGHT, PADDLE_STARTX, BALL_SPEED, BALL_SIZE, BALL_STARTX, BALL_STARTY} from './setup';\n// Helpers\nimport { createBricks } from \"./helpers\";\n\n\nlet gameOver = false;\nlet score = 0;\n\nfunction setGameOver(view: CanvasView) {\n    view.drawInfo('Game Over!')\n    gameOver = false\n}\n\nfunction setGameWin(view: CanvasView) {\n    view.drawInfo('Game Won!')\n    gameOver = false\n}\nfunction gameLoop(\n    view:CanvasView, \n    bricks:Brick[], \n    // paddle:Paddle, \n    // ball:Ball\n    ) {\n        view.clear();\n        view.drawBricks(bricks);\n        \n        requestAnimationFrame(()=> gameLoop(view,bricks));\n}\n\nfunction startGame(view: CanvasView ) {\n    // Reset display\n    score = 0;\n    view.drawInfo('');\n    view.drawScore(0)\n    const BRICKS = createBricks()\n\n    gameLoop(VIEW, BRICKS)\n    \n}\n\n// Create a new view\nconst VIEW = new CanvasView('#playField');\nVIEW.initStartButton(startGame)"]}